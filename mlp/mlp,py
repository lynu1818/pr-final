from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns
import gzip
import numpy as np
import os

def load_images(path):
    with gzip.open(path, 'rb') as f:
        magic = int.from_bytes(f.read(4), 'big')
        if magic != 2051:
            raise ValueError(f"Invalid magic number {magic} in image file: {path}")
        num_images = int.from_bytes(f.read(4), 'big')
        rows = int.from_bytes(f.read(4), 'big')
        cols = int.from_bytes(f.read(4), 'big')
        data = np.frombuffer(f.read(), dtype=np.uint8)
        data = data.reshape(num_images, rows * cols)
        return data

def load_labels(path):
    with gzip.open(path, 'rb') as f:
        magic = int.from_bytes(f.read(4), 'big')
        if magic != 2049:
            raise ValueError(f"Invalid magic number {magic} in label file: {path}")
        num_labels = int.from_bytes(f.read(4), 'big')
        labels = np.frombuffer(f.read(), dtype=np.uint8)
        return labels

# 資料夾路徑
data_dir = "../data"
result_dir = "../results/mlp_output"
os.makedirs(result_dir, exist_ok=True)

# 載入資料
x_train = load_images(os.path.join(data_dir, 'train-images-idx3-ubyte.gz'))
y_train = load_labels(os.path.join(data_dir, 'train-labels-idx1-ubyte.gz'))
x_test = load_images(os.path.join(data_dir, 't10k-images-idx3-ubyte.gz'))
y_test = load_labels(os.path.join(data_dir, 't10k-labels-idx1-ubyte.gz'))

unique_labels, counts = np.unique(y_train, return_counts=True)
for label, count in zip(unique_labels, counts):
    print(f"Label {label}: {count} samples")

# 標準化：讓每個特徵平均為0、方差為1
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

# 定義 MLP 分類器
mlp = MLPClassifier(hidden_layer_sizes=(200, 100, 50), activation='relu',
                    solver='adam', alpha=0.0005, learning_rate_init=0.001,
                    max_iter=500, early_stopping=True, random_state=42)

# 訓練模型
mlp.fit(x_train_scaled, y_train)

# 預測測試集
y_pred = mlp.predict(x_test_scaled)

# 評估結果
accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print("Accuracy on Oracle-MNIST with Raw MLP:", accuracy)
print("\nClassification Report:")
print(report)

# 儲存結果文字檔
with open(os.path.join(result_dir, "result.txt"), "w") as f:
    f.write(f"Accuracy on Oracle-MNIST with Raw MLP: {accuracy:.4f}\n\n")
    f.write("Classification Report:\n")
    f.write(report)

# 繪製混淆矩陣
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix: Raw MLP")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.savefig(os.path.join(result_dir, "confusion_matrix.png"))
plt.show()